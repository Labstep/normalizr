'use strict';
function _defineProperties(e, t) {
  for (var n = 0; n < t.length; n++) {
    var r = t[n];
    (r.enumerable = r.enumerable || !1),
      (r.configurable = !0),
      'value' in r && (r.writable = !0),
      Object.defineProperty(e, r.key, r);
  }
}
function _createClass(e, t, n) {
  return t && _defineProperties(e.prototype, t), n && _defineProperties(e, n), e;
}
function _defineProperty(e, t, n) {
  return (
    t in e ? Object.defineProperty(e, t, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : (e[t] = n), e
  );
}
function _objectSpread(e) {
  for (var t = 1; t < arguments.length; t++) {
    var n = null != arguments[t] ? arguments[t] : {},
      r = Object.keys(n);
    'function' == typeof Object.getOwnPropertySymbols &&
      (r = r.concat(
        Object.getOwnPropertySymbols(n).filter(function(e) {
          return Object.getOwnPropertyDescriptor(n, e).enumerable;
        })
      )),
      r.forEach(function(t) {
        _defineProperty(e, t, n[t]);
      });
  }
  return e;
}
function _inheritsLoose(e, t) {
  (e.prototype = Object.create(t.prototype)), (e.prototype.constructor = e), (e.__proto__ = t);
}
function isImmutable(e) {
  return !(
    !e ||
    'function' != typeof e.hasOwnProperty ||
    !(e.hasOwnProperty('__ownerID') || (e._map && e._map.hasOwnProperty('__ownerID')))
  );
}
function denormalizeImmutable(e, t, n) {
  return Object.keys(e).reduce(function(t, r) {
    var i = '' + r;
    return t.has(i) ? t.set(i, n(t.get(i), e[i])) : t;
  }, t);
}
Object.defineProperty(exports, '__esModule', { value: !0 });
var getDefaultGetId = function(e) {
    return function(t) {
      return isImmutable(t) ? t.get(e) : t[e];
    };
  },
  EntitySchema = (function() {
    function e(e, t, n) {
      if ((void 0 === t && (t = {}), void 0 === n && (n = {}), !e || 'string' != typeof e))
        throw new Error('Expected a string key for Entity, but found ' + e + '.');
      var r = n,
        i = r.idAttribute,
        o = void 0 === i ? 'id' : i,
        a = r.mergeStrategy,
        u =
          void 0 === a
            ? function(e, t) {
                return _objectSpread({}, e, t);
              }
            : a,
        c = r.processStrategy,
        s =
          void 0 === c
            ? function(e) {
                return _objectSpread({}, e);
              }
            : c;
      (this._key = e),
        (this._getId = 'function' == typeof o ? o : getDefaultGetId(o)),
        (this._idAttribute = o),
        (this._mergeStrategy = u),
        (this._processStrategy = s),
        this.define(t);
    }
    var t = e.prototype;
    return (
      (t.define = function(e) {
        this.schema = Object.keys(e).reduce(function(t, n) {
          var r,
            i = e[n];
          return _objectSpread({}, t, (((r = {})[n] = i), r));
        }, this.schema || {});
      }),
      (t.getId = function(e, t, n) {
        return this._getId(e, t, n);
      }),
      (t.merge = function(e, t) {
        return this._mergeStrategy(e, t);
      }),
      (t.normalize = function(e, t, n, r, i, o) {
        var a = this,
          u = this.getId(e, t, n),
          c = this.key;
        if (
          (c in o || (o[c] = {}),
          u in o[c] || (o[c][u] = []),
          o[c][u].some(function(t) {
            return t === e;
          }))
        )
          return u;
        o[c][u].push(e);
        var s = this._processStrategy(e, t, n);
        return (
          Object.keys(this.schema).forEach(function(e) {
            if (s.hasOwnProperty(e) && 'object' == typeof s[e]) {
              var t = a.schema[e];
              s[e] = r(s[e], s, e, t, i, o);
            }
          }),
          i(this, s, e, t, n),
          u
        );
      }),
      (t.denormalize = function(e, t) {
        var n = this;
        return isImmutable(e)
          ? denormalizeImmutable(this.schema, e, t)
          : (Object.keys(this.schema).forEach(function(r) {
              if (e.hasOwnProperty(r)) {
                var i = n.schema[r];
                e[r] = t(e[r], i);
              }
            }),
            e);
      }),
      _createClass(e, [
        {
          key: 'key',
          get: function() {
            return this._key;
          }
        },
        {
          key: 'idAttribute',
          get: function() {
            return this._idAttribute;
          }
        }
      ]),
      e
    );
  })(),
  PolymorphicSchema = (function() {
    function e(e, t) {
      t &&
        (this._schemaAttribute =
          'string' == typeof t
            ? function(e) {
                return e[t];
              }
            : t),
        this.define(e);
    }
    var t = e.prototype;
    return (
      (t.define = function(e) {
        this.schema = e;
      }),
      (t.getSchemaAttribute = function(e, t, n) {
        return !this.isSingleSchema && this._schemaAttribute(e, t, n);
      }),
      (t.inferSchema = function(e, t, n) {
        if (this.isSingleSchema) return this.schema;
        var r = this.getSchemaAttribute(e, t, n);
        return this.schema[r];
      }),
      (t.normalizeValue = function(e, t, n, r, i, o) {
        var a = this.inferSchema(e, t, n);
        if (!a) return e;
        var u = r(e, t, n, a, i, o);
        return this.isSingleSchema || null == u ? u : { id: u, schema: this.getSchemaAttribute(e, t, n) };
      }),
      (t.denormalizeValue = function(e, t) {
        var n = isImmutable(e) ? e.get('schema') : e.schema;
        return this.isSingleSchema || n
          ? t((isImmutable(e) ? e.get('id') : e.id) || e, this.isSingleSchema ? this.schema : this.schema[n])
          : e;
      }),
      _createClass(e, [
        {
          key: 'isSingleSchema',
          get: function() {
            return !this._schemaAttribute;
          }
        }
      ]),
      e
    );
  })(),
  UnionSchema = (function(e) {
    function t(t, n) {
      if (!n) throw new Error('Expected option "schemaAttribute" not found on UnionSchema.');
      return e.call(this, t, n) || this;
    }
    _inheritsLoose(t, e);
    var n = t.prototype;
    return (
      (n.normalize = function(e, t, n, r, i, o) {
        return this.normalizeValue(e, t, n, r, i, o);
      }),
      (n.denormalize = function(e, t) {
        return this.denormalizeValue(e, t);
      }),
      t
    );
  })(PolymorphicSchema),
  ValuesSchema = (function(e) {
    function t() {
      return e.apply(this, arguments) || this;
    }
    _inheritsLoose(t, e);
    var n = t.prototype;
    return (
      (n.normalize = function(e, t, n, r, i, o) {
        var a = this;
        return Object.keys(e).reduce(function(t, n, u) {
          var c,
            s = e[n];
          return null != s ? _objectSpread({}, t, (((c = {})[n] = a.normalizeValue(s, e, n, r, i, o)), c)) : t;
        }, {});
      }),
      (n.denormalize = function(e, t) {
        var n = this;
        return Object.keys(e).reduce(function(r, i) {
          var o,
            a = e[i];
          return _objectSpread({}, r, (((o = {})[i] = n.denormalizeValue(a, t)), o));
        }, {});
      }),
      t
    );
  })(PolymorphicSchema),
  validateSchema = function(e) {
    if (Array.isArray(e) && e.length > 1)
      throw new Error('Expected schema definition to be a single schema, but found ' + e.length + '.');
    return e[0];
  },
  getValues = function(e) {
    return Array.isArray(e)
      ? e
      : Object.keys(e).map(function(t) {
          return e[t];
        });
  },
  normalize = function(e, t, n, r, i, o, a) {
    return (
      (e = validateSchema(e)),
      getValues(t).map(function(t, u) {
        return i(t, n, r, e, o, a);
      })
    );
  },
  denormalize = function(e, t, n) {
    return (
      (e = validateSchema(e)),
      t && t.map
        ? t.map(function(t) {
            return n(t, e);
          })
        : t
    );
  },
  ArraySchema = (function(e) {
    function t() {
      return e.apply(this, arguments) || this;
    }
    _inheritsLoose(t, e);
    var n = t.prototype;
    return (
      (n.normalize = function(e, t, n, r, i, o) {
        var a = this;
        return getValues(e)
          .map(function(e, u) {
            return a.normalizeValue(e, t, n, r, i, o);
          })
          .filter(function(e) {
            return null != e;
          });
      }),
      (n.denormalize = function(e, t) {
        var n = this;
        return e && e.map
          ? e.map(function(e) {
              return n.denormalizeValue(e, t);
            })
          : e;
      }),
      t
    );
  })(PolymorphicSchema),
  _normalize = function(e, t, n, r, i, o, a) {
    var u = _objectSpread({}, t);
    return (
      Object.keys(e).forEach(function(n) {
        var r = e[n],
          c = i(t[n], t, n, r, o, a);
        null == c ? delete u[n] : (u[n] = c);
      }),
      u
    );
  },
  _denormalize = function(e, t, n) {
    if (isImmutable(t)) return denormalizeImmutable(e, t, n);
    var r = _objectSpread({}, t);
    return (
      Object.keys(e).forEach(function(t) {
        null != r[t] && (r[t] = n(r[t], e[t]));
      }),
      r
    );
  },
  ObjectSchema = (function() {
    function e(e) {
      this.define(e);
    }
    var t = e.prototype;
    return (
      (t.define = function(e) {
        this.schema = Object.keys(e).reduce(function(t, n) {
          var r,
            i = e[n];
          return _objectSpread({}, t, (((r = {})[n] = i), r));
        }, this.schema || {});
      }),
      (t.normalize = function() {
        for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++) t[n] = arguments[n];
        return _normalize.apply(void 0, [this.schema].concat(t));
      }),
      (t.denormalize = function() {
        for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++) t[n] = arguments[n];
        return _denormalize.apply(void 0, [this.schema].concat(t));
      }),
      e
    );
  })(),
  visit = function e(t, n, r, i, o, a) {
    return 'object' == typeof t && t
      ? 'object' != typeof i || (i.normalize && 'function' == typeof i.normalize)
        ? i.normalize(t, n, r, e, o, a)
        : (Array.isArray(i) ? normalize : _normalize)(i, t, n, r, e, o, a)
      : t;
  },
  addEntities = function(e) {
    return function(t, n, r, i, o) {
      var a = t.key,
        u = t.getId(r, i, o);
      a in e || (e[a] = {});
      var c = e[a][u];
      e[a][u] = c ? t.merge(c, n) : n;
    };
  },
  schema = { Array: ArraySchema, Entity: EntitySchema, Object: ObjectSchema, Union: UnionSchema, Values: ValuesSchema },
  normalize$1 = function(e, t) {
    if (!e || 'object' != typeof e)
      throw new Error('Unexpected input given to normalize. Expected type to be "object", found "' + typeof e + '".');
    var n = {},
      r = addEntities(n);
    return { entities: n, result: visit(e, e, null, t, r, {}) };
  },
  unvisitEntity = function(e, t, n, r, i) {
    var o = r(e, t);
    if ('object' != typeof o || null === o) return o;
    if ((i[t.key] || (i[t.key] = {}), !i[t.key][e])) {
      var a = isImmutable(o) ? o : _objectSpread({}, o);
      i[t.key][e] = a;
      var u = t.denormalize(a, n);
      i[t.key][e] = t.EntityClass ? new t.EntityClass(u) : u;
    }
    return 'Object' === i[t.key][e].constructor.name && t.EntityClass ? new t.EntityClass(i[t.key][e]) : i[t.key][e];
  },
  getUnvisit = function(e) {
    var t = {},
      n = getEntities(e);
    return function e(r, i) {
      return 'object' != typeof i || (i.denormalize && 'function' == typeof i.denormalize)
        ? null == r
          ? r
          : i instanceof EntitySchema
          ? unvisitEntity(r, i, e, n, t)
          : i.denormalize(r, e)
        : (Array.isArray(i) ? denormalize : _denormalize)(i, r, e);
    };
  },
  getEntities = function(e) {
    var t = isImmutable(e);
    return function(n, r) {
      var i = r.key;
      return 'object' == typeof n ? n : t ? e.getIn([i, n.toString()]) : e[i] && e[i][n];
    };
  },
  denormalize$1 = function(e, t, n) {
    if (void 0 !== e) return getUnvisit(n)(e, t);
  };
(exports.denormalize = denormalize$1), (exports.normalize = normalize$1), (exports.schema = schema);
